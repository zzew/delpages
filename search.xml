<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OneNote使用笔记]]></title>
    <url>%2F2018%2F04%2F23%2FOneNote%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言：之前很长一段时间用OneNote记笔记，但是发现它的同步是个问题，老是同步出错，也一直解决不了。后来慢慢开始用有道云笔记记东西（主要是能写markdown），然后OneNote搁置到现在。 最近突然又想用OneNote来记东西了（主要是因为颜值高，真心觉得有道云笔记太丑了，奈何我又是颜控），虽然同步有问题，但把笔记写在本地，不用同步，体验还是不错的。下面主要是我在使用过程中遇到的问题。 1. 关于OneNote不同版本的问题目前我电脑里有两个版本的OneNote，一个是win10自带的OneNote，另一个是OneNote 2016. 简单来说，自带的OneNote功能相对少一些，但也是够用的。只有在某些场合下功能受限，比如：新建笔记本等。 就我个人而言，更喜欢自带的OneNote，整个UI风格，交互设计可以说是非常符合我的口味。而OneNote 2016的界面和word很像，整体来说也还是不错的。 2. 如何新建笔记本如上面所说，新建笔记本这个操作在自带的OneNote里是不能实现的，需要用OneNote 2016来实现。 笔记本一共有两种，一种是云端笔记本，另一种是本地笔记本。 新建云端笔记本 【文件 — 新建 — OneDrive-个人】 新建本地笔记本 【文件 — 新建 — 这台电脑】 3. 如何同步本地笔记本在【文件 — 信息】里找到要同步的本地的笔记本，点击旁边的【设置 — 共享或移动】，就能把本地笔记本搬移到云端，这里需要注意的是搬移到云端的笔记本和本地笔记本虽然名字一样但已经没有关系了，属于两个独立的笔记本了。 另外说一下如何区分云端和本地的笔记本，如下图： 4. 如何删除笔记本和新建笔记本一样，分为云端和本地两种 删除云端笔记本 这个操作并不能在软件里实现，需要配合网页的云端进行。 简单来说，先登陆网页版的OneDrive，删除选择的笔记本，然后在客户端【文件 — 信息 — 设置】里点击关闭。这时候你再【打开】笔记本你会发现原笔记本已经没有了。（这两者的先后顺序不影响） 删除本地笔记本 和云端的操作类似，先在本地把对应笔记本的文件夹删除，一般在【C:\Users\用户名\Documents\OneNote 笔记本】下，然后再点击【关闭】对应的笔记本。 嗯，就酱！]]></content>
      <tags>
        <tag>OneNote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于乘法器的那些事]]></title>
    <url>%2F2018%2F02%2F26%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F%E5%85%B3%E4%BA%8E%E4%B9%98%E6%B3%95%E5%99%A8%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[一、整数乘法器1.1 整数的概念整数在IEEE的规定上有，短整数 short integer ，中整数 integer 和 长整数 long integer ，他们之间的关系如下： 整数 字节空间 取值范围 短整数 一个字节 -127 ~ 127 整数 二个字节 -32767~32767 长整数 四个字节 -2147483647~2147483647 若无特殊说明，以下都以短整数举例。 四个结论： 短整数的最高位是符号位，正值的符号位是“0”，负值的符号位是“1”。 正值用原码表示，负值用补码表示。 正值(8’b0000_0100)“取反加一”就得到负值(8’b1111_1100) ； 同理，负值(8’b1111_1100)“取反加一”就得到正值(b’b0000_0100)。 8’b1000_0000既不是正数也不是负数也不是0，它是划分正值和负值的边界线。 12345+4 即 8&apos;b0000_0100;+127 即 8&apos;b0111_1111;分界线 8&apos;b1000_0000;-127 即 8&apos;b1000_0001;-4 即 8&apos;b1111_1100; 1.2 传统乘法器在传统概念上，乘法等价于“重复几次”，也就是累加操作。比如：B=4,那么A x B等价于A重复加四次。那如果B=-4应该怎么理解呢？先来看一组例子：12345A x B = C；3 x 4 = 12;-3x 4 = -12;3 x-4 = -12;-3x-4 = 12; 其中，C的值可以看成由两部分构成：正负和数值。 撇开正负不看，乘积的数值就是A和B绝对值相乘的结果。那么乘积的正负如何确定呢？ 其实正负号的运算规则和数字电路中的“异或运算”一样。 A B C(A⊕B) 0 0 0 0 1 1 1 0 1 1 1 0 其中，0表示正号，1表示负号。 因此，传统乘法器实现的大致操作如下： 在初始化之际，取乘数和被乘数的正负关系,然后取乘数和被乘数的正值。 每一次累加操作，递减一次乘数。直到乘数的值为零，表示操作结束。 输出结果根据正负关系取得。 其实传统的乘法器是很容易的，但是随着整数的出现，负值和正值也随着出现，这也使得设计多了一点难度。但是只要掌握负值和正值的关系以后，乘法只作正值也“无问题” ，只要在结果输出之前“下一点手脚”就行了。 1.3 传统乘法器的改进传统的乘法器虽然简单，但是它有一个致命的问题。就是被乘数越大就越消耗时钟。那么要解决这个问题就要了解为什么会产生这个问题。还是举例来说： 假设A=10 , B=20 , A x B ，那么时钟的消耗至少需要 20个，因为A值需要累加20次才能得到结果。回顾一下乘法法则：A x B = B x A。如果以B作为基础，那么B值只需要累加10次就能得到结果，这样就可以节省时钟的消耗。 因此我们可以这样改进：在进行累加操作之前，增加一个比较步骤。如果被乘数小于乘数，那么被乘数和乘数互换。1&#123;Multiplier , Multiplicand&#125; = Multiplicand &lt; Multiplier ? &#123;Multiplicand ，Multiplier&#125; : &#123;Multiplier ，Multiplicand&#125;； 于是,改进版传统乘法器实现的大致操作如下： 在初始化之际，取乘数和被乘数的正负关系，然后取被乘数和乘数的正值。 乘数和被乘数比较，如果被乘数小于乘数，结果乘数和被乘数互换。 每一次累加操作，递减一次乘数。直到乘数的值为零，表示操作结束。 输出结果根据正负关系取得。 传统的乘法器无论如何改进也好，当遇见如 127 x 127 的乘数和被乘数，咋样也看不出什么可以优化的地方… 1.4 补码的意义上面也说到过一点，就是实现正数和负数之间的转换，也就是说使符号位能与有效值部分一起参加运算,从而简化运算规则。 另外，还有一点就是使减法运算转换为加法运算,进一步简化计算机中运算器的线路设计。 1.5 Booth算法乘法器 未完待续。。。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>乘法器</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《9号秘事》]]></title>
    <url>%2F2018%2F02%2F11%2F%E5%BD%B1%E8%AF%84%2F%E3%80%8A9%E5%8F%B7%E7%A7%98%E4%BA%8B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[前言昨天花了一晚上时间把神剧《9号秘事》的第2、3、4季都刷完了。当看完最后一集时慢慢合上电脑，深深地吸了口气，可以说是非常的爽了。说实话，上一次有这种感觉的时候还是看完《黑镜》那会了。 躺床上后，我迟迟不能入睡，脑子里还处理着剧里的信息。经历各种思考后，我决定把我觉得重要的东西写下来，一来整理下自己的思路，写下自己的观后感，二来当作笔记，生怕时间久后忘了精彩的情节。 第一季[还没看] 第二季首播时间：2015-03-26(英国) 豆瓣评分：8.8（截至编辑时间） IMDb评分：8.2（截至编辑时间） 第1集 故事概况： 秘事发生在一节9号列车卧铺车厢里。医生Maxwell为了得到工作，杀死了恰巧在同一车厢的竞争对手Meyer，但在下车前才发现自己杀错人了，真正的Meyer医生睡错了床，而且在此之前他还得到了Maxwell的帮助。 说实话，第一眼看到男主，我一度以为是《纸牌屋》里的弗兰克，虽然我知道不可能，但实在是太像了，眼神，动作，神态。。。像极了年轻版的弗兰克！另外，英国人的口音实在是让人无法抗拒啊啊啊！！！ 咳咳，回到剧情。 一开始车厢里只有Maxwell医生和一个已经睡着了的人（说实话不是很懂为啥要叫Maxwell这个名字。。。），在Maxwell躺下准备睡觉后，来了一位彪形大汉，虽西装革履，但体态只能说类似流浪汉，吵吵闹闹，莽莽撞撞，而且似乎哪里不舒服，一直咳嗽。Maxwell忍受不了争吵几句过后便各自睡觉去了。不就，来了一对老夫妻，是去参加女儿婚礼的，显然，又是吵吵闹闹。最后进来的是个fat gril，是个旅行家，一直在打电话，一会又出去了。 到这里，显然这节车厢里的人物都亮相了。说实话，我对接下来的剧情发展毫无头绪。前期导演拍了很多看似无关紧要、乱七八糟的情节（对于细节的把控很是到位，看似纷乱复杂，实则耐人寻味，幽默风趣），但这些情节对人物形象的塑造很是关键，为后面的情节做了很好的铺垫，可以说，缺一不可。【在这里忍不住想夸一下演员的演技了，可以说这部剧里的演员没一个是我觉得帅或者漂亮的，可人家硬是靠演技把人物演活了。反观国内，哎。。。或许某天，等国民消费水平提高了，我们不再买单无脑的肥皂剧了，不再期待闭着眼都能猜到的剧情了，知道自己想要的是什么了，愿意花钱买优质服务了之后，才会有类似HBO、英国电视4台、NetFlix等公司的优秀作品吧。。。】 情节的反转是在旅行女打完电话后回来开始的，同时，她又带回了个炮友。闲聊了会后，他俩就开始躺床上了（虽然说很多国外高分剧都充斥着暴力、色情等元素，但我至少没有在英剧里见过。额，美剧里倒是不少，特别是HBO的。。。），就在这时，那男的看到上铺的乘客的头悬在床边，惊醒了一车的人。 说到底就是突然发现自己的车厢中有具尸体，乘客都有啥反应。（额，那我上面为什么要说那么多。。。）其实有趣就有趣在这里，每个人物做出的的反应是如此真实，合情合理，但总感觉略有违和感。先来说医生Maxwell，他首先站出来说都别动，我是医生，在确认那人死后又出去找警卫，让其他人都别走。到这里，都没什么特别的，作为一个医生，这些都是常规操作。其次，说说那个胖叔叔，真正的Meyer医生，他下床后第一件事就是翻死者的口袋，找到了个钱包，里面有张家庭合照。显然，他已经当爷爷了，众人都感到惋惜。这时Maxwell医生回来了，说找不到人。没办法，这时候只能用紧急停止按钮了。 。。。。。。桂桂，怎么写了辣么多了，这才第一集啊，后面怎么办哟。。。算了，后面不写那么详细了，难得写影评没想说的太多没收住。。。先这样吧，下次有空再更——2018/2/11 第2集第3集第4集第5集第6集]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>英剧</tag>
        <tag>烧脑神剧</tag>
        <tag>9号秘事</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matlab产生测试激励]]></title>
    <url>%2F2018%2F02%2F11%2FMatlab%2FMatlab%E4%BA%A7%E7%94%9F%E6%B5%8B%E8%AF%95%E6%BF%80%E5%8A%B1%2F</url>
    <content type="text"><![CDATA[前言在FPGA开发过程中几乎都要用到仿真的功能，对于一些简单的外部激励（如时钟、复位、简单数据或者信号等）直接在testbench中编写产生就行了，但对于复杂的外部激励数据，很难在testbench中产生，这时就要通过读取外部文件里的数据来实现。通过和matlab的配合使用，基本上可以模拟各种外部激励。举例来说：输入信号是三个不同频率的正弦波的相加，经过FIR低通滤波器滤除高频分量，输出频率最低的那个正弦信号。这种情况下测试用的输入信号不能通过testbench编写产生。简单来说有以下两种方法可以模拟输入信号： 在FPGA内部通过DDS产生三个正弦波，然后将三个波形相加作为输入信号。 利用matlab产生输入信号，将数据导出为.txt文件，在仿真时读取文件内的数据作为外部激励。 显然第二种方法更加灵活和便捷。下面，具体介绍一下这种方法的使用。 平台： Vivado 16.4 Matlab R2017b Matlab程序编写： 代码如下： 1234567891011121314151617181920212223242526272829303132333435%=============设置系统参数==============%f1=1e6; %设置波形频率f2=500e3;f3=800e3;Fs=20e6; %设置采样频率L=1024; %数据长度N=14; %数据位宽%=============产生输入信号==============%t=0:1/Fs:(1/Fs)*(L-1);y1=sin(2*pi*f1*t);y2=sin(2*pi*f2*t);y3=sin(2*pi*f3*t);y4=y1+y2+y3;y_n=round(y4*(2^(N-3)-1)); %N比特量化;如果有n个信号相加，则设置（N-n）%=================画图==================%a=10; %改变系数可以调整显示周期stem(t,y_n);axis([0 L/Fs/a -2^N 2^N]); %显示%=============写入外部文件==============%fid=fopen(&apos;E:\Workspace\Vivado_16.4\TEST\TestBench\sin_data.txt&apos;,&apos;w&apos;); %把数据写入sin_data.txt文件中，如果没有就创建该文件for k=1:length(y_n) B_s=dec2bin(y_n(k)+((y_n(k))&lt;0)*2^N,N); for j=1:N if B_s(j)==&apos;1&apos; tb=1; else tb=0; end fprintf(fid,&apos;%d&apos;,tb); end fprintf(fid,&apos;\r\n&apos;);endfprintf(fid,&apos;;&apos;);fclose(fid); 此程序中设置了三个频率分别为1M、500k和800k的正弦波，然后将三个波形相加并且量化后作为输出。最后将路径设置为相应文件所在路径即可，需要注意的是如果对应路径下没有相应文件，则会自动新建文件并写入数据。 运行程序： 打开对应的文件目录可以看到二进制数据文件已经生成。 接下来就可以进行在testbench中读取外部数据的操作了。 Testbench的编写： 代码如下： 12345678910111213141516171819202122232425`timescale 1ns/1psmodule TB_readfile();reg SCLK;reg [13:0] data_out;//--------------时钟部分----------------//initial SCLK = 0;always #10 SCLK = ~SCLK;//-------------------------------------//parameter data_num = 32&apos;d1024;integer i = 0;reg [13:0] data_men[1:data_num];reg [13:0] data_reg = 0;initial begin $readmemb(&quot;E:/Workspace/Vivado_16.4/2017_8_28_TEST/TestBench/sin_data.txt&quot;,data_men); //注意斜杠的方向，不能反&lt;&lt;&lt;&lt;&lt;&lt;&lt;endalways @(posedge SCLK) begin data_out &lt;= data_men[i]; i &lt;= i + 8&apos;d1;end//------------------------------------//endmodule 因为这里只需要读取外部数据，所以Vivado工程里只需要添加仿真文件就行了。 运行仿真：可以看到，仿真的波形和matlab中显示的波形一致，说明结果正确。 结束语Matlab可以说是个很强大的工具，在设计中合理的使用matlab可以起到事半功倍的效果。当然我也在不断的学习中，如果有疑问或者更好的想法欢迎交流。。。]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>Testbench</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AM解调的FPGA实现]]></title>
    <url>%2F2018%2F02%2F09%2FFPGA%2FAM%E8%A7%A3%E8%B0%83%E7%9A%84FPGA%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[一、说明： 功能：AM解调 平台：Vivado 2016.4 和 Matlab R2017a 二、原理：1.AM解调原理 模拟电路中采用“包络检波”的方法： 数字电路中采用类似的方法：先将已调信号取绝对值，再经过低通滤波器，滤除高频分量（经AM调制的信号包含两个高频分量：载波频率+/-调制信号频率，因此低通滤波器的截止频率小于两个高频分量就可以），得到的就是叠加了直流分量的调制信号，去直流后便可以得到调制信号。 三、AM解调的FPGA实现1.将已调制的AM信号取绝对值关于AM信号的产生，参见上一篇博客：AM调制的FPGA实现 简单说明一下对数据取反的思路：如果是无符号数，则不存在符号位，也就是说数据都是正数，不需要取绝对值；如果是有符号数，通过检测最高位的符号位，如果符号位是1，则表示数据是负数，对数据取反，如果符号位是0，则表示数据是正数，不需要取反操作。 取绝对值的Verilog实现： 1234567891011121314always @(posedge clk or negedge rst_n) begin if(!rst_n) begin data_tdata &lt;= 0; end else if(AM_mod[15] == 1) begin data_tdata &lt;= -&#123;AM_mod&#125;; //如果符号位是1，对数据取反 end else if(AM_mod[15] == 0) begin data_tdata &lt;= AM_mod; //如果符号位是0，数据不变 end else begin data_tdata &lt;= data_tdata; endend 2.使用FIR滤波器滤除高频分量关于Vivado的FIR IP核可以说是功能很强大的，但这里不需要其他复杂的功能，只需要简单的生成一个的低通滤波器就行了。类似于ROM核的生成，配置FIR同样需要Matlab配合。可见，Matlab的功能是多么强大。这里Matlab的主要作用是对滤波器的性能进行仿真并生成相应的抽头系数。 使用Matlab生成FIR的抽头系数 在Matlab的命令行窗口输入：filterDesigner（以前是用fdatool命令，不过输入fdatool也可以，只是会提醒你改用新的命令）弹出滤波器设计窗口： 接下来，对滤波器的一些参数进行设置： 参数设置好后，点击Design Filter 按钮查看生成滤波器的幅频响应图，通过幅频响应等图来判断滤波器是否达到设计要求： 设计的滤波器满足性能指标后需要将抽头系数导出，保存为.coe文件。在导出前需要对系数进行量化。因为需要解调的AM信号也是16位宽，所以这里的位宽设置保持默认值，这些可以根据实际情况自行修改。 量化过后就能将抽头系数导出为.coe文件了： 生成FIR IP核 IP核的具体配置如下： 其他保持默认即可： 同样，在IP核配置界面也可以查看滤波器的幅频特性： IP核生成完毕后，就可以编写IP核的调用模块了。 FIR IP核调用模块： 123456789101112131415161718192021222324252627282930313233module FIR_Control( input clk, input rst_n, input signed [15:0] s_axis_data_tdata, output reg [7:0] data_out);wire s_axis_data_tready;wire m_axis_data_tvalid;wire [39:0] m_axis_data_tdata; //滤波器输出信号always @(posedge clk or negedge rst_n) begin if(!rst_n) begin data_out &lt;= 0; end else begin data_out &lt;= m_axis_data_tdata[33:26]; //根据仿真结果进行截位 endend//--------------调用FIR核----------------//FIR FIR_inst0( .aclk (clk), .s_axis_data_tvalid (1), //拉高时IP核开始工作 .s_axis_data_tready (s_axis_data_tready), .s_axis_data_tdata (s_axis_data_tdata), //输入信号 .m_axis_data_tvalid (m_axis_data_tvalid), //拉高时表明数据输出有效 .m_axis_data_tdata (m_axis_data_tdata) //输出信号);//---------------------------------------//endmodule 需要注意的是：m_axis_data_tdata 信号是滤波器的数据输出信号，我们在使用时一般都要对此数据进行截位操作，如何进行截位需要根据仿真结果来确定。比如，在这个工程中，我需要的滤波器的输出数据是8位，但不能一下子截取高8位，而且m_axis_data_tdata是个40位的数据，从仿真波形来看m_axis_data_tdata[39:34]都是符号位，因此从33位开始往下截取8位数据（当然也可以从34位开始截，这样的话就多了一位符号位，相应的数据位就变少了一位）。 3.去直流处理经过FIR滤波后的波形其实就是一个叠加了直流分量的调制信号。在本工程中，AM调制是100%调制，也就是说解调时经过FIR后的信号的最小值为0，可以把它看作是无符号的数，直接经DA输出就行了。如果不是100%调制呢？也就是说解调时经过FIR后的信号的最小值是大于0的，那么这个大于0的量就相当于直流，需要去掉后再经DA输出。因此，在这个工程中，不需要去直流处理。下面给出顶层文件的代码。 顶层模块编写： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546module TOP( input clk, input rst_n, output [7:0] AM_demod);//--------------------------------//reg signed [15:0] data_tdata;wire signed [15:0] AM_mod;//--------------------------------////-----------取绝对值-------------//always @(posedge clk or negedge rst_n) begin if(!rst_n) begin data_tdata &lt;= 0; end else if(AM_mod[15] == 1) begin data_tdata &lt;= -&#123;AM_mod&#125;; //如果符号位是1，对数据取反 end else if(AM_mod[15] == 0) begin data_tdata &lt;= AM_mod; //如果符号位是0，数据不变 end else begin data_tdata &lt;= data_tdata; endend//--------------------------------////-----------AM已调信号------------//modulate modulate_inst0( .clk (clk), .rst_n (rst_n), .AM_mod (AM_mod));//--------------------------------////----------滤波器控制模块---------//FIR_Control FIR_Control_inst2( .clk (clk), .rst_n (rst_n), .s_axis_data_tdata (data_tdata), .data_out (AM_demod));//--------------------------------//endmodule 4.解调仿真 编写TestBeach： 123456789101112131415161718192021222324252627`timescale 1ns/1psmodule tb_AM();//===================解调部分====================////----------接口设置----------//reg sclk;reg rst_n;wire [7:0] AM_demod;//--------------------------//initial sclk = 1;always #5 sclk = ~sclk; //100M时钟initial begin rst_n = 0; #500 rst_n = 1;end//----------解调模块----------//TOP TOP_inst( .clk (sclk), .rst_n (rst_n), .AM_demod (AM_demod));//---------------------------//endmodule 仿真结果 由仿真结果可知，最终输出信号正确还原了已调制信号的包络，表明解调正确。]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>AM</tag>
        <tag>调制解调</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AM调制的FPGA实现]]></title>
    <url>%2F2018%2F02%2F09%2FFPGA%2FAM%E8%B0%83%E5%88%B6%E7%9A%84FPGA%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[一、说明： 功能：AM调制 平台：Vivado 2016.4 和 Matlab R2017a 二、原理：1. AM调制原理 AM已调信号的时域表达式： 已调信号的频域表达式：本质上AM调制就是频谱的搬移。 AM调制的系统框图将调制信号加上一个直流分量，保证信号的最小值大于零，然后再和载波相乘，得到已调信号。 三、AM调制的FPGA实现1.产生调制信号和载波信号调用ROM IP核在FPGA内部产生两路余弦信号，其中一路信号用于模拟外部输入的调制信号，另一路用作载波信号。在配置ROM IP核之前，需要用Matlab生.coe文件，存放在ROM核里。 Matlab生成.coe文件： 123456789101112131415161718192021222324%---------------------------------%width=8; %设置rom的位宽depth=1024; %设置rom的深度%---------------------------------%x=linspace(0,2*pi,depth); %在一个周期内产生depth个采样点y_cos=cos(x); %生成余弦函数%y_cos=sin(x); %生成正弦函数%y_cos=round(y_cos*(2^(width-1)-1))+2^(width-1)-1; %将数据转化成整数,生成无符号数y_cos=round(y_cos*(2^(width-1)-1)); %将数据转化成整数,生成有符号数plot(x,y_cos); %绘图fid = fopen(&apos;E:\Workspace\DDS\Design\IP_Core\cos.coe&apos;,&apos;wt&apos;);fprintf(fid,&apos;memory_initialization_radix = 10;\nmemory_initialization_vector = &apos;);for i = 1 : depth if mod(i-1,8) == 0 fprintf(fid,&apos;\n&apos;); end fprintf(fid,&apos;%6d,&apos;,y_cos(i));endfclose(fid); %关闭文件 生成.coe文件后就可以进行IP核的配置了。 ROM核具体配置： 配置完IP核后，编写控制模块，产生两路信号。其中，调制信号上叠加的直流分量的大小为调制信号的峰值，这样将得到调制度为100%的已调信号。如果要得到不同的调制度，则需要叠加不同大小的直流分量，同时需要注意定义的数据位宽，防止数据溢出。 产生载波和带有直流分量的调制信号： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758module cos_make( input clk, input rst_n, output reg [7:0] cos_s, output reg signed [7:0] cos_c);//------------------------------------//parameter freq_s = 32&apos;d429497; //调制信号频率10kparameter freq_c = 32&apos;d42949673; //载波频率1Mparameter cnt_width = 8&apos;d32;//------------------------------------////------------------------------------//reg [cnt_width-1:0] cnt_s = 0;reg [cnt_width-1:0] cnt_c = 0;wire [9:0] addr_s;wire [9:0] addr_c;always @(posedge clk or negedge rst_n) begin if(!rst_n) begin cnt_s &lt;= 0; cnt_c &lt;= 0; end else begin cnt_s &lt;= cnt_s + freq_s; cnt_c &lt;= cnt_c + freq_c; endendassign addr_s = cnt_s[cnt_width-1:cnt_width-10];assign addr_c = cnt_c[cnt_width-1:cnt_width-10];//------------------------------------////------------调用ROM核----------------//wire signed [7:0] cos_s_r;wire signed [7:0] cos_c_r;ROM ROM_inst( .clka (clk), .addra (addr_s), .douta (cos_s_r), .clkb (clk), .addrb (addr_c), .doutb (cos_c_r));always @(posedge clk or negedge rst_n) begin if(!rst_n) begin cos_s &lt;= 0; cos_c &lt;= 0; end else begin cos_s &lt;= cos_s_r + 8 &apos;d128; //加上大小为峰值的直流分量 cos_c &lt;= cos_c_r; endendendmodule 2.生成AM调制信号得到两路信号后就可以用乘法器将两路信号相乘，得到已调信号。 乘法器具体配置： AM调制的顶层模块： 123456789101112131415161718192021222324252627module modulate( input clk, input rst_n, output signed [15:0] AM_mod);wire [7:0] cos_s;wire signed [7:0] cos_c;//------------调用出波模块------------//cos_make cos_make_inst0( .clk (clk), .rst_n (rst_n), .cos_s (cos_s), .cos_c (cos_c));//-----------------------------------////------------调用乘法器--------------//MULT MULT_inst1( .CLK (clk), .A (cos_s), .B (cos_c), .P (AM_mod));endmodule 3.仿真调制结果以上AM调制过程基本完成，但是正确与否还需要通过仿真来确定，接下来编写仿真用的测试模块。 TestBeach的编写： 12345678910111213141516171819202122232425`timescale 1ns/1psmodule tb_AM();//---------接口设置----------//reg sclk;reg rst_n;wire signed [15:0] AM_mod;//--------------------------//initial sclk = 1;always #5 sclk = ~sclk; //100M时钟initial begin rst_n = 0; #500 rst_n = 1;end//--------------------------//modulate modulate_inst0( .clk (sclk), .rst_n (rst_n), .AM_mod (AM_mod));endmodule 在Vivado中将各个文件添加进工程后，运行仿真。 仿真结果如下： 已调信号能明显看到包络，并且包络的频率同调制信号一致，表明AM调制正确。]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>AM</tag>
        <tag>调制解调</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于博客]]></title>
    <url>%2F2018%2F02%2F06%2F%E4%B8%AA%E4%BA%BA%2F%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[我的博客之路 种一棵树最好的时间是什么时候？ 十年之前。 简单来说，我的博客之路主要分为以下几个阶段： 第一阶段：从刚接触博客到真正开始写博客经历了很长时间。我的第一篇博客是在博客园写的，在决定写博客之前收集了很多信息，包括在知乎，Google等上查如何写博客？为什么要写博客？在哪里写博客？之类的问题。犹豫了很久，才决定在博客园上写。 第二阶段：在博客园上写了两篇不怎么样的博客后就很长一段时间都没在写博客，一方面是学业较忙，另一方面是确实没什么产出，因为一开始给自己博客的定位是技术类博客，所以不是干货也不愿意放博客上。后来一次偶然的机会，发现周围很多人都在CSDN，而那段时间正好用上了MarkDown，所以决定尝试用CSDN的MarkDown编辑器写博客，然后发现界面居然还挺好看的，体验真心不错，至少比博客园的编辑体验好多了（说实话，编辑体验确实很能影响写博客的心情），于是乎决定在CSDN常驻下来，曾一度以为这里是我的博客归属地了。 第三阶段：随着时间的推移，慢慢的开始胡思乱想了，万一博客园和CSDN倒闭了怎么办，之前的文章不就都没了吗;把自己的心得、成果都放在别人家的网站上总感觉不太放心，总感觉不是属于自己的东西（原谅我奇怪的占有欲233）。于是萌生了利用GitHub搭建博客的想法，但又突然想到万一GitHub倒闭了或者被墙了怎么办？毕竟GitHub被墙比CSDN倒闭的可能性大多了。。。于是一个偶然的机会看到了开头的那句话。可以说，这句话是我开始动手建站的导火索。是啊，纠结是最弱智的行为。在经历了两个晚上的折腾之后终于搭建完了自己的博客。可以说是满满的成就感啊！ 目前我的写博客流程基本是这样的： 在本地用MarkDown写完博客后推到个人博客，作为博客的出处。 将本地博客导入到CSDN进行发布。 将本地文件内容复制到博客园进行发布。 当然，平台什么的都是其次，主要是有产出，而这个博客站点的搭建也是为了激励我坚持写博客。 但行好事，莫问前程！]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github搭建博客教程]]></title>
    <url>%2F2018%2F02%2F05%2FHEXO%2FGithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言：关于本博客的搭建，参考了很多网上的教程，虽然说网上教程很多，但总觉得很分散，每个教程的着重点都不一样，因此我顺便整理了下在自己搭建博客过程中参考过的教程。 搭建步骤：一、软件安装：不详细讲，具体教程网上很多，nodejs和git的安装基本都默认下一步。 二、搭建本地博客1. 安装hexo打开cmd命令（WIN+R），执行命令 1npm install hexo-cli -g 等待自动安装完成后，输入 1hexo -v 可以检查是否安装成功，如果没问题可以继续。 2. 初始化hexo新建一个文件夹Hexo，用于存放博客，配置等。右键 1Git Bash Here 直接定位到当前文件夹,然后执行 1&gt;hexo init 初始化配置文件,可能时间比较长，耐心等待。完成后，输入 1npm install 配置node。接下来输入 1hexo g 加载hexo基础html、css、js等文件。在这完成后等于已经在本地创建了一个网页，想查看的话，输入 1hexo s 这相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。（Ctrl + C 是停止的意思，不是复制！） 这里注意：不要Ctrl+C！不要Ctrl+C！不要Ctrl+C！ 把网址输入到浏览器就能访问本地网页了。 一定要先浏览网页再执行Ctrl+C结束，顺序颠倒会导致访问不了网页。 但如果提示错误解决办法如下：Hexo server not working；Hexo 无法访问页面 打开文件Hexo/_config.yml,添加如下代码 123456server: port: 5000 # or anohter number log: false ip: 0.0.0.0 compress: false header: true 如图所示 重新输入 1hexo s 端口号会变成5000。同样，先输入网址。 至此，本地博客框架搭建完成 3. DIY博客主题之前的博客界面主题是默认的，当然是要换成别的啦。说是DIY，其实就是搬运别人的主题。下面按照我的主题举例介绍如何搬运。 首先输入 1git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo 把对应的主题clone到本地Hexo/theme/3-hexo下 这时在theme文件夹下面多了一个3-hexo的文件夹，这就是下载下来的主题。 修改根目录下的 _config.yml文件 1theme: 3-hexo 再次运行 1hexo s 到这里为止，主题算是搬运完了，接下来就是细节上的修改，将别人的主页变成自己的，具体修改方法参考原作者在GitHub上的说明。 三、部署到GitHub1.配置远程仓库地址在根目录下的 _config.yml文件中修改 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/用户名/用户名.github.io.git branch: master 2. 其他具体可以参考其他参考教程。 关于新建分支用于存放源文件的操作其他参考教程上也有。 四、常用指令博客搭建好之后，后期写博客会有一些常用指令。 新建文章： 1hexo new &quot;文件名字&quot; 本地写完后，将本地源文件备份到github： 123git add .git commit -m &quot;备注&quot;git push origin hexo 将文件转换为网页，部署到博客： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 一些参考网站： next主题配合简书\也可以看Hexo置顶及排序问题等主要参考如何设置主题 主要看使用hexo+github免费搭建个人博客网站超详细教程另外GitHub Pages + Hexo搭建博客\以及Hexo+Github搭建个人博客两个分支方便维护等主要参考如何部署和维护 其他有关修改主题内容的教程：为 hexo NexT 添加 Gitment 评论插件和Hexo Next 主题博客添加gitment评论功能]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
</search>
